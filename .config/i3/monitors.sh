#!/bin/bash

################################################################################
# This script cycles through the monitor setups that it finds in `~/.screenlayout/`.
# Every call of this script executes the next setup script.
# Prerequisites:
#  - scripts in `~/.screenlayout/`. They can be generated by arandr via `save as`.
#  - An example script, that only uses one monitor:
#    ```
#    xrandr --output VGA-1 --off --output LVDS-1-2 --off --output LVDS-1 --primary --mode 1920x1080 --pos 0x0 --rotate normal --output VGA-1-2 --off --output DP-1-3 --off --output DP-1-2 --off --output DP-1-1 --off
#    ```
################################################################################

# This is the dir in which the monitor setup scripts (ie. xrandr calls) reside
MONITOR_SETUP_PATH=~/.screenlayout/
# in this temporary file the current setting is stored. So it can be restored in the next call of this script
TEMP_FILE=/tmp/monitor_setup_filename.txt

# Retrieves all the filenames of the monitor setup scripts in a list.
# return:
#  MONITOR_SETUP_FILES: List of the setup files in MONITOR_SETUP_PATH
#  n:                   length of the list
function get_monitor_setup_files {
  MONITOR_SETUP_FILES=($(ls $MONITOR_SETUP_PATH))

  # ignore README files
  for n in  "${!MONITOR_SETUP_FILES[@]}"
  do
    if [[ ${MONITOR_SETUP_FILES[n]} == README* ]]
    then
      # remove unwanted files from set
      unset 'MONITOR_SETUP_FILES[n]'
    fi
  done

  # len of list of files
  n=${#MONITOR_SETUP_FILES[@]}
}

# Retrieves the index of the current setup script in the list by its filename.
# return:
#  i: index of current setup in the list
function get_number_of_current_setup_file {
  for i in  "${!MONITOR_SETUP_FILES[@]}"
  do
    if [[ ${MONITOR_SETUP_FILES[i]} == $CURRENT_MONITOR_SETUP ]]
    then
      break
    fi
  done
}

# Calculates the next index in the list of setup files (cycles by modulo and handles default).
# return:
#  CURRENT_MONITOR_SETUP: filename of the monitor setup script to apply
function determine_next_setup_file {
  if [ -f $TEMP_FILE ]
  then
    CURRENT_MONITOR_SETUP=`cat $TEMP_FILE`
    get_number_of_current_setup_file
    i=$(($i + 1))
    i=$(($i % $n))
  else
    i=0
  fi
  CURRENT_MONITOR_SETUP=${MONITOR_SETUP_FILES[i]}
  echo $CURRENT_MONITOR_SETUP > $TEMP_FILE
}

# Performs the execution of the monitor setup script.
function execute_setup {
  # inform user by dunst notification
  notify-send "Monitor Setup" $CURRENT_MONITOR_SETUP

  # the actual execution of the script
  bash $MONITOR_SETUP_PATH$CURRENT_MONITOR_SETUP
}

# The main code
get_monitor_setup_files
determine_next_setup_file
execute_setup
